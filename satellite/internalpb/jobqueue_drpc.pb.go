// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: jobqueue.proto

package internalpb

import (
	bytes "bytes"
	context "context"
	errors "errors"

	jsonpb "github.com/gogo/protobuf/jsonpb"
	proto "github.com/gogo/protobuf/proto"

	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_jobqueue_proto struct{}

func (drpcEncoding_File_jobqueue_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_jobqueue_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_jobqueue_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	var buf bytes.Buffer
	err := new(jsonpb.Marshaler).Marshal(&buf, msg.(proto.Message))
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (drpcEncoding_File_jobqueue_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return jsonpb.Unmarshal(bytes.NewReader(buf), msg.(proto.Message))
}

type DRPCJobQueueClient interface {
	DRPCConn() drpc.Conn

	Push(ctx context.Context, in *JobQueuePushRequest) (*JobQueuePushResponse, error)
	PushBatch(ctx context.Context, in *JobQueuePushBatchRequest) (*JobQueuePushBatchResponse, error)
	Pop(ctx context.Context, in *JobQueuePopRequest) (*JobQueuePopResponse, error)
	Peek(ctx context.Context, in *JobQueuePeekRequest) (*JobQueuePeekResponse, error)
	Len(ctx context.Context, in *JobQueueLengthRequest) (*JobQueueLengthResponse, error)
	Inspect(ctx context.Context, in *JobQueueInspectRequest) (*JobQueueInspectResponse, error)
	Truncate(ctx context.Context, in *JobQueueTruncateRequest) (*JobQueueTruncateResponse, error)
	AddPlacementQueue(ctx context.Context, in *JobQueueAddPlacementQueueRequest) (*JobQueueAddPlacementQueueResponse, error)
	DestroyPlacementQueue(ctx context.Context, in *JobQueueDestroyPlacementQueueRequest) (*JobQueueDestroyPlacementQueueResponse, error)
	Clean(ctx context.Context, in *JobQueueCleanRequest) (*JobQueueCleanResponse, error)
	Trim(ctx context.Context, in *JobQueueTrimRequest) (*JobQueueTrimResponse, error)
}

type drpcJobQueueClient struct {
	cc drpc.Conn
}

func NewDRPCJobQueueClient(cc drpc.Conn) DRPCJobQueueClient {
	return &drpcJobQueueClient{cc}
}

func (c *drpcJobQueueClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcJobQueueClient) Push(ctx context.Context, in *JobQueuePushRequest) (*JobQueuePushResponse, error) {
	out := new(JobQueuePushResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Push", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) PushBatch(ctx context.Context, in *JobQueuePushBatchRequest) (*JobQueuePushBatchResponse, error) {
	out := new(JobQueuePushBatchResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/PushBatch", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) Pop(ctx context.Context, in *JobQueuePopRequest) (*JobQueuePopResponse, error) {
	out := new(JobQueuePopResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Pop", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) Peek(ctx context.Context, in *JobQueuePeekRequest) (*JobQueuePeekResponse, error) {
	out := new(JobQueuePeekResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Peek", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) Len(ctx context.Context, in *JobQueueLengthRequest) (*JobQueueLengthResponse, error) {
	out := new(JobQueueLengthResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Len", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) Inspect(ctx context.Context, in *JobQueueInspectRequest) (*JobQueueInspectResponse, error) {
	out := new(JobQueueInspectResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Inspect", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) Truncate(ctx context.Context, in *JobQueueTruncateRequest) (*JobQueueTruncateResponse, error) {
	out := new(JobQueueTruncateResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Truncate", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) AddPlacementQueue(ctx context.Context, in *JobQueueAddPlacementQueueRequest) (*JobQueueAddPlacementQueueResponse, error) {
	out := new(JobQueueAddPlacementQueueResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/AddPlacementQueue", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) DestroyPlacementQueue(ctx context.Context, in *JobQueueDestroyPlacementQueueRequest) (*JobQueueDestroyPlacementQueueResponse, error) {
	out := new(JobQueueDestroyPlacementQueueResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/DestroyPlacementQueue", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) Clean(ctx context.Context, in *JobQueueCleanRequest) (*JobQueueCleanResponse, error) {
	out := new(JobQueueCleanResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Clean", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcJobQueueClient) Trim(ctx context.Context, in *JobQueueTrimRequest) (*JobQueueTrimResponse, error) {
	out := new(JobQueueTrimResponse)
	err := c.cc.Invoke(ctx, "/jobqueue.JobQueue/Trim", drpcEncoding_File_jobqueue_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCJobQueueServer interface {
	Push(context.Context, *JobQueuePushRequest) (*JobQueuePushResponse, error)
	PushBatch(context.Context, *JobQueuePushBatchRequest) (*JobQueuePushBatchResponse, error)
	Pop(context.Context, *JobQueuePopRequest) (*JobQueuePopResponse, error)
	Peek(context.Context, *JobQueuePeekRequest) (*JobQueuePeekResponse, error)
	Len(context.Context, *JobQueueLengthRequest) (*JobQueueLengthResponse, error)
	Inspect(context.Context, *JobQueueInspectRequest) (*JobQueueInspectResponse, error)
	Truncate(context.Context, *JobQueueTruncateRequest) (*JobQueueTruncateResponse, error)
	AddPlacementQueue(context.Context, *JobQueueAddPlacementQueueRequest) (*JobQueueAddPlacementQueueResponse, error)
	DestroyPlacementQueue(context.Context, *JobQueueDestroyPlacementQueueRequest) (*JobQueueDestroyPlacementQueueResponse, error)
	Clean(context.Context, *JobQueueCleanRequest) (*JobQueueCleanResponse, error)
	Trim(context.Context, *JobQueueTrimRequest) (*JobQueueTrimResponse, error)
}

type DRPCJobQueueUnimplementedServer struct{}

func (s *DRPCJobQueueUnimplementedServer) Push(context.Context, *JobQueuePushRequest) (*JobQueuePushResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) PushBatch(context.Context, *JobQueuePushBatchRequest) (*JobQueuePushBatchResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) Pop(context.Context, *JobQueuePopRequest) (*JobQueuePopResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) Peek(context.Context, *JobQueuePeekRequest) (*JobQueuePeekResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) Len(context.Context, *JobQueueLengthRequest) (*JobQueueLengthResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) Inspect(context.Context, *JobQueueInspectRequest) (*JobQueueInspectResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) Truncate(context.Context, *JobQueueTruncateRequest) (*JobQueueTruncateResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) AddPlacementQueue(context.Context, *JobQueueAddPlacementQueueRequest) (*JobQueueAddPlacementQueueResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) DestroyPlacementQueue(context.Context, *JobQueueDestroyPlacementQueueRequest) (*JobQueueDestroyPlacementQueueResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) Clean(context.Context, *JobQueueCleanRequest) (*JobQueueCleanResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCJobQueueUnimplementedServer) Trim(context.Context, *JobQueueTrimRequest) (*JobQueueTrimResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCJobQueueDescription struct{}

func (DRPCJobQueueDescription) NumMethods() int { return 11 }

func (DRPCJobQueueDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/jobqueue.JobQueue/Push", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Push(
						ctx,
						in1.(*JobQueuePushRequest),
					)
			}, DRPCJobQueueServer.Push, true
	case 1:
		return "/jobqueue.JobQueue/PushBatch", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					PushBatch(
						ctx,
						in1.(*JobQueuePushBatchRequest),
					)
			}, DRPCJobQueueServer.PushBatch, true
	case 2:
		return "/jobqueue.JobQueue/Pop", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Pop(
						ctx,
						in1.(*JobQueuePopRequest),
					)
			}, DRPCJobQueueServer.Pop, true
	case 3:
		return "/jobqueue.JobQueue/Peek", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Peek(
						ctx,
						in1.(*JobQueuePeekRequest),
					)
			}, DRPCJobQueueServer.Peek, true
	case 4:
		return "/jobqueue.JobQueue/Len", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Len(
						ctx,
						in1.(*JobQueueLengthRequest),
					)
			}, DRPCJobQueueServer.Len, true
	case 5:
		return "/jobqueue.JobQueue/Inspect", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Inspect(
						ctx,
						in1.(*JobQueueInspectRequest),
					)
			}, DRPCJobQueueServer.Inspect, true
	case 6:
		return "/jobqueue.JobQueue/Truncate", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Truncate(
						ctx,
						in1.(*JobQueueTruncateRequest),
					)
			}, DRPCJobQueueServer.Truncate, true
	case 7:
		return "/jobqueue.JobQueue/AddPlacementQueue", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					AddPlacementQueue(
						ctx,
						in1.(*JobQueueAddPlacementQueueRequest),
					)
			}, DRPCJobQueueServer.AddPlacementQueue, true
	case 8:
		return "/jobqueue.JobQueue/DestroyPlacementQueue", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					DestroyPlacementQueue(
						ctx,
						in1.(*JobQueueDestroyPlacementQueueRequest),
					)
			}, DRPCJobQueueServer.DestroyPlacementQueue, true
	case 9:
		return "/jobqueue.JobQueue/Clean", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Clean(
						ctx,
						in1.(*JobQueueCleanRequest),
					)
			}, DRPCJobQueueServer.Clean, true
	case 10:
		return "/jobqueue.JobQueue/Trim", drpcEncoding_File_jobqueue_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCJobQueueServer).
					Trim(
						ctx,
						in1.(*JobQueueTrimRequest),
					)
			}, DRPCJobQueueServer.Trim, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterJobQueue(mux drpc.Mux, impl DRPCJobQueueServer) error {
	return mux.Register(impl, DRPCJobQueueDescription{})
}

type DRPCJobQueue_PushStream interface {
	drpc.Stream
	SendAndClose(*JobQueuePushResponse) error
}

type drpcJobQueue_PushStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_PushStream) SendAndClose(m *JobQueuePushResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_PushBatchStream interface {
	drpc.Stream
	SendAndClose(*JobQueuePushBatchResponse) error
}

type drpcJobQueue_PushBatchStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_PushBatchStream) SendAndClose(m *JobQueuePushBatchResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_PopStream interface {
	drpc.Stream
	SendAndClose(*JobQueuePopResponse) error
}

type drpcJobQueue_PopStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_PopStream) SendAndClose(m *JobQueuePopResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_PeekStream interface {
	drpc.Stream
	SendAndClose(*JobQueuePeekResponse) error
}

type drpcJobQueue_PeekStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_PeekStream) SendAndClose(m *JobQueuePeekResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_LenStream interface {
	drpc.Stream
	SendAndClose(*JobQueueLengthResponse) error
}

type drpcJobQueue_LenStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_LenStream) SendAndClose(m *JobQueueLengthResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_InspectStream interface {
	drpc.Stream
	SendAndClose(*JobQueueInspectResponse) error
}

type drpcJobQueue_InspectStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_InspectStream) SendAndClose(m *JobQueueInspectResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_TruncateStream interface {
	drpc.Stream
	SendAndClose(*JobQueueTruncateResponse) error
}

type drpcJobQueue_TruncateStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_TruncateStream) SendAndClose(m *JobQueueTruncateResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_AddPlacementQueueStream interface {
	drpc.Stream
	SendAndClose(*JobQueueAddPlacementQueueResponse) error
}

type drpcJobQueue_AddPlacementQueueStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_AddPlacementQueueStream) SendAndClose(m *JobQueueAddPlacementQueueResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_DestroyPlacementQueueStream interface {
	drpc.Stream
	SendAndClose(*JobQueueDestroyPlacementQueueResponse) error
}

type drpcJobQueue_DestroyPlacementQueueStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_DestroyPlacementQueueStream) SendAndClose(m *JobQueueDestroyPlacementQueueResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_CleanStream interface {
	drpc.Stream
	SendAndClose(*JobQueueCleanResponse) error
}

type drpcJobQueue_CleanStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_CleanStream) SendAndClose(m *JobQueueCleanResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCJobQueue_TrimStream interface {
	drpc.Stream
	SendAndClose(*JobQueueTrimResponse) error
}

type drpcJobQueue_TrimStream struct {
	drpc.Stream
}

func (x *drpcJobQueue_TrimStream) SendAndClose(m *JobQueueTrimResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_jobqueue_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
