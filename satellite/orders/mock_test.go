// Code generated by MockGen. DO NOT EDIT.
// Source: storj.io/storj/satellite/orders (interfaces: Overlay)
//
// Generated by this command:
//
//	mockgen -destination mock_test.go -package orders -mock_names Overlay=MockOverlayForOrders . Overlay
//

// Package orders is a generated GoMock package.
package orders

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	storj "storj.io/common/storj"
	nodeselection "storj.io/storj/satellite/nodeselection"
	overlay "storj.io/storj/satellite/overlay"
)

// MockOverlayForOrders is a mock of Overlay interface.
type MockOverlayForOrders struct {
	ctrl     *gomock.Controller
	recorder *MockOverlayForOrdersMockRecorder
	isgomock struct{}
}

// MockOverlayForOrdersMockRecorder is the mock recorder for MockOverlayForOrders.
type MockOverlayForOrdersMockRecorder struct {
	mock *MockOverlayForOrders
}

// NewMockOverlayForOrders creates a new mock instance.
func NewMockOverlayForOrders(ctrl *gomock.Controller) *MockOverlayForOrders {
	mock := &MockOverlayForOrders{ctrl: ctrl}
	mock.recorder = &MockOverlayForOrdersMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOverlayForOrders) EXPECT() *MockOverlayForOrdersMockRecorder {
	return m.recorder
}

// CachedGetOnlineNodesForGet mocks base method.
func (m *MockOverlayForOrders) CachedGetOnlineNodesForGet(arg0 context.Context, arg1 []storj.NodeID) (map[storj.NodeID]*nodeselection.SelectedNode, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CachedGetOnlineNodesForGet", arg0, arg1)
	ret0, _ := ret[0].(map[storj.NodeID]*nodeselection.SelectedNode)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CachedGetOnlineNodesForGet indicates an expected call of CachedGetOnlineNodesForGet.
func (mr *MockOverlayForOrdersMockRecorder) CachedGetOnlineNodesForGet(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CachedGetOnlineNodesForGet", reflect.TypeOf((*MockOverlayForOrders)(nil).CachedGetOnlineNodesForGet), arg0, arg1)
}

// Get mocks base method.
func (m *MockOverlayForOrders) Get(ctx context.Context, nodeID storj.NodeID) (*overlay.NodeDossier, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, nodeID)
	ret0, _ := ret[0].(*overlay.NodeDossier)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockOverlayForOrdersMockRecorder) Get(ctx, nodeID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockOverlayForOrders)(nil).Get), ctx, nodeID)
}

// GetOnlineNodesForAudit mocks base method.
func (m *MockOverlayForOrders) GetOnlineNodesForAudit(arg0 context.Context, arg1 []storj.NodeID) (map[storj.NodeID]*overlay.NodeReputation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineNodesForAudit", arg0, arg1)
	ret0, _ := ret[0].(map[storj.NodeID]*overlay.NodeReputation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineNodesForAudit indicates an expected call of GetOnlineNodesForAudit.
func (mr *MockOverlayForOrdersMockRecorder) GetOnlineNodesForAudit(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineNodesForAudit", reflect.TypeOf((*MockOverlayForOrders)(nil).GetOnlineNodesForAudit), arg0, arg1)
}

// GetOnlineNodesForRepair mocks base method.
func (m *MockOverlayForOrders) GetOnlineNodesForRepair(arg0 context.Context, arg1 []storj.NodeID) (map[storj.NodeID]*overlay.NodeReputation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOnlineNodesForRepair", arg0, arg1)
	ret0, _ := ret[0].(map[storj.NodeID]*overlay.NodeReputation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOnlineNodesForRepair indicates an expected call of GetOnlineNodesForRepair.
func (mr *MockOverlayForOrdersMockRecorder) GetOnlineNodesForRepair(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOnlineNodesForRepair", reflect.TypeOf((*MockOverlayForOrders)(nil).GetOnlineNodesForRepair), arg0, arg1)
}

// IsOnline mocks base method.
func (m *MockOverlayForOrders) IsOnline(node *overlay.NodeDossier) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOnline", node)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOnline indicates an expected call of IsOnline.
func (mr *MockOverlayForOrdersMockRecorder) IsOnline(node any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOnline", reflect.TypeOf((*MockOverlayForOrders)(nil).IsOnline), node)
}

// TestGetOnlineNodesForAuditRepair mocks base method.
func (m *MockOverlayForOrders) TestGetOnlineNodesForAuditRepair(arg0 context.Context, arg1 []storj.NodeID) (map[storj.NodeID]*overlay.NodeReputation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TestGetOnlineNodesForAuditRepair", arg0, arg1)
	ret0, _ := ret[0].(map[storj.NodeID]*overlay.NodeReputation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TestGetOnlineNodesForAuditRepair indicates an expected call of TestGetOnlineNodesForAuditRepair.
func (mr *MockOverlayForOrdersMockRecorder) TestGetOnlineNodesForAuditRepair(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestGetOnlineNodesForAuditRepair", reflect.TypeOf((*MockOverlayForOrders)(nil).TestGetOnlineNodesForAuditRepair), arg0, arg1)
}
