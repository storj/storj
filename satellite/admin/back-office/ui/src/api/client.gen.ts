// AUTOGENERATED BY private/apigen
// DO NOT EDIT.

import { HttpClient } from '@/utils/httpClient';
import { Time, UUID } from '@/types/common';

export class AccountFlags {
    create: boolean;
    delete: boolean;
    history: boolean;
    list: boolean;
    projects: boolean;
    search: boolean;
    suspend: boolean;
    unsuspend: boolean;
    resetMFA: boolean;
    updateInfo: boolean;
    updateLimits: boolean;
    updatePlacement: boolean;
    updateStatus: boolean;
    updateValueAttribution: boolean;
    view: boolean;
}

export class BucketFlags {
    create: boolean;
    delete: boolean;
    history: boolean;
    list: boolean;
    updateInfo: boolean;
    updatePlacement: boolean;
    updateValueAttribution: boolean;
    view: boolean;
}

export class FeatureFlags {
    account: AccountFlags;
    project: ProjectFlags;
    bucket: BucketFlags;
    dashboard: boolean;
    operator: boolean;
    signOut: boolean;
    switchSatellite: boolean;
}

export class PlacementInfo {
    id: number;
    location: string;
}

export class Project {
    id: UUID;
    name: string;
    description: string;
    userAgent: string;
    owner: User;
    createdAt: Time;
    defaultPlacement: number;
    rateLimit: number | null;
    burstLimit: number | null;
    maxBuckets: number | null;
    bandwidthLimit: number | null;
    bandwidthUsed: number;
    storageLimit: number | null;
    storageUsed: number | null;
    segmentLimit: number | null;
    segmentUsed: number | null;
}

export class ProjectFlags {
    create: boolean;
    delete: boolean;
    history: boolean;
    list: boolean;
    updateInfo: boolean;
    updateLimits: boolean;
    updatePlacement: boolean;
    updateValueAttribution: boolean;
    view: boolean;
    memberList: boolean;
    memberAdd: boolean;
    memberRemove: boolean;
}

export class ProjectLimitsUpdate {
    maxBuckets: number;
    storageLimit: number;
    bandwidthLimit: number;
    segmentLimit: number;
    rateLimit: number;
    burstLimit: number;
}

export class Settings {
    admin: SettingsAdmin;
}

export class SettingsAdmin {
    features: FeatureFlags;
}

export class User {
    id: UUID;
    fullName: string;
    email: string;
}

export class UserAccount {
    id: UUID;
    fullName: string;
    email: string;
    paidTier: boolean;
    kind: number;
    createdAt: Time;
    status: string;
    userAgent: string;
    defaultPlacement: number;
    projects: UserProject[] | null;
}

export class UserProject {
    id: UUID;
    name: string;
    bandwidthLimit: number;
    bandwidthUsed: number;
    storageLimit: number;
    storageUsed: number | null;
    segmentLimit: number;
    segmentUsed: number | null;
}

class APIError extends Error {
    constructor(
        public readonly msg: string,
        public readonly responseStatusCode?: number,
    ) {
        super(msg);
    }
}

export class SettingsHttpApiV1 {
    private readonly http: HttpClient = new HttpClient();
    private readonly ROOT_PATH: string = '/back-office/api/v1/settings';

    public async get(): Promise<Settings> {
        const fullPath = `${this.ROOT_PATH}/`;
        const response = await this.http.get(fullPath);
        if (response.ok) {
            return response.json().then((body) => body as Settings);
        }
        const err = await response.json();
        throw new APIError(err.error, response.status);
    }
}

export class PlacementManagementHttpApiV1 {
    private readonly http: HttpClient = new HttpClient();
    private readonly ROOT_PATH: string = '/back-office/api/v1/placements';

    public async getPlacements(): Promise<PlacementInfo[]> {
        const fullPath = `${this.ROOT_PATH}/`;
        const response = await this.http.get(fullPath);
        if (response.ok) {
            return response.json().then((body) => body as PlacementInfo[]);
        }
        const err = await response.json();
        throw new APIError(err.error, response.status);
    }
}

export class UserManagementHttpApiV1 {
    private readonly http: HttpClient = new HttpClient();
    private readonly ROOT_PATH: string = '/back-office/api/v1/users';

    public async getUserByEmail(email: string): Promise<UserAccount> {
        const fullPath = `${this.ROOT_PATH}/${email}`;
        const response = await this.http.get(fullPath);
        if (response.ok) {
            return response.json().then((body) => body as UserAccount);
        }
        const err = await response.json();
        throw new APIError(err.error, response.status);
    }
}

export class ProjectManagementHttpApiV1 {
    private readonly http: HttpClient = new HttpClient();
    private readonly ROOT_PATH: string = '/back-office/api/v1/projects';

    public async getProject(publicID: UUID): Promise<Project> {
        const fullPath = `${this.ROOT_PATH}/${publicID}`;
        const response = await this.http.get(fullPath);
        if (response.ok) {
            return response.json().then((body) => body as Project);
        }
        const err = await response.json();
        throw new APIError(err.error, response.status);
    }

    public async updateProjectLimits(request: ProjectLimitsUpdate, publicID: UUID): Promise<void> {
        const fullPath = `${this.ROOT_PATH}/limits/${publicID}`;
        const response = await this.http.put(fullPath, JSON.stringify(request));
        if (response.ok) {
            return;
        }
        const err = await response.json();
        throw new APIError(err.error, response.status);
    }
}
