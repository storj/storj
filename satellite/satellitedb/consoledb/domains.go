// Copyright (C) 2025 Storj Labs, Inc.
// See LICENSE for copying information.

package consoledb

import (
	"context"

	"github.com/zeebo/errs"

	"storj.io/common/uuid"
	"storj.io/storj/satellite/console"
	"storj.io/storj/satellite/satellitedb/dbx"
)

// ensures that domains implements console.Domains.
var _ console.Domains = (*domains)(nil)

// implementation of Domains interface repository using spacemonkeygo/dbx orm.
type domains struct {
	db dbx.DriverMethods
}

// Create implements satellite.Domains method to create new Domain.
func (d *domains) Create(ctx context.Context, data console.Domain) (_ *console.Domain, err error) {
	defer mon.Task()(&ctx)(&err)

	dbxDomain, err := d.db.Create_Domain(
		ctx,
		dbx.Domain_Subdomain(data.Subdomain),
		dbx.Domain_ProjectId(data.ProjectID[:]),
		dbx.Domain_Prefix(data.Prefix),
		dbx.Domain_AccessId(data.AccessID),
		dbx.Domain_CreatedBy(data.CreatedBy[:]),
	)
	if err != nil {
		return nil, err
	}

	return domainFromDBX(ctx, dbxDomain)
}

// Delete implements satellite.Domains delete domain by project ID and subdomain method.
func (d *domains) Delete(ctx context.Context, projectID uuid.UUID, subdomain string) (err error) {
	defer mon.Task()(&ctx)(&err)

	_, err = d.db.Delete_Domain_By_ProjectId_And_Subdomain(ctx, dbx.Domain_ProjectId(projectID[:]), dbx.Domain_Subdomain(subdomain))
	return err
}

// DeleteAllByProjectID implements satellite.Domains delete all domains by project ID method.
func (d *domains) DeleteAllByProjectID(ctx context.Context, projectID uuid.UUID) (err error) {
	defer mon.Task()(&ctx)(&err)

	_, err = d.db.Delete_Domain_By_ProjectId(ctx, dbx.Domain_ProjectId(projectID[:]))
	return err
}

// domainFromDBX is used for creating Domain entity from autogenerated dbx.Domain struct.
func domainFromDBX(ctx context.Context, domain *dbx.Domain) (_ *console.Domain, err error) {
	defer mon.Task()(&ctx)(&err)

	if domain == nil {
		return nil, errs.New("domain parameter is nil")
	}

	projectID, err := uuid.FromBytes(domain.ProjectId)
	if err != nil {
		return nil, err
	}

	createdBy, err := uuid.FromBytes(domain.CreatedBy)
	if err != nil {
		return nil, err
	}

	return &console.Domain{
		ProjectID: projectID,
		CreatedBy: createdBy,
		Subdomain: domain.Subdomain,
		Prefix:    domain.Prefix,
		AccessID:  domain.AccessId,
		CreatedAt: domain.CreatedAt,
	}, nil
}
